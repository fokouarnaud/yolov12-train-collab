"""
YOLOv12-Face - Script de D√©marrage Automatique Google Colab
Installation compl√®te et lancement en une commande
"""

import os
import sys
import subprocess
import logging
import time
from pathlib import Path
import requests
import zipfile
import shutil

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class YOLOv12FaceColabSetup:
    """Setup automatique complet pour Google Colab"""
    
    def __init__(self):
        self.base_dir = Path('/content')
        self.project_dir = self.base_dir / 'yolov12_face_project'
        self.datasets_dir = self.base_dir / 'datasets'
        self.runs_dir = self.base_dir / 'runs'
        
        # URLs des ressources
        self.urls = {
            'yolov12_repo': 'https://github.com/rsemihkoca/yolov12-face.git',
            'widerface_train': 'https://huggingface.co/datasets/wider_face/resolve/main/data/WIDER_train.zip',
            'widerface_val': 'https://huggingface.co/datasets/wider_face/resolve/main/data/WIDER_val.zip',
            'widerface_annotations': 'https://huggingface.co/datasets/wider_face/resolve/main/data/wider_face_split.zip'
        }
        
        self.is_colab = self._check_colab_environment()
        
    def _check_colab_environment(self) -> bool:
        """V√©rifie si on est dans Google Colab"""
        try:
            import google.colab
            logger.info("‚úÖ Environnement Google Colab d√©tect√©")
            return True
        except ImportError:
            logger.info("‚ÑπÔ∏è Environnement local d√©tect√©")
            return False
    
    def setup_environment(self):
        """Configure l'environnement complet"""
        
        logger.info("üöÄ D√©marrage setup YOLOv12-Face pour Google Colab")
        logger.info("="*60)
        
        # 1. V√©rifications syst√®me
        self._check_system_requirements()
        
        # 2. Installation des d√©pendances
        self._install_dependencies()
        
        # 3. Configuration des r√©pertoires
        self._setup_directories()
        
        # 4. Clonage du repository YOLOv12
        self._clone_yolov12_repo()
        
        # 5. T√©l√©chargement dataset WiderFace (optionnel)
        if self._ask_user_confirmation("T√©l√©charger le dataset WiderFace (~3GB) ?"):
            self._download_widerface_dataset()
        
        # 6. Configuration du projet
        self._setup_project_config()
        
        # 7. Test final
        self._run_integration_test()
        
        logger.info("üéâ Setup termin√© avec succ√®s!")
        self._print_next_steps()
    
    def _check_system_requirements(self):
        """V√©rifie les requis syst√®me"""
        
        logger.info("üîç V√©rification des requis syst√®me...")
        
        # GPU
        try:
            import torch
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1e9
                logger.info(f"‚úÖ GPU: {gpu_name} ({gpu_memory:.1f}GB)")
            else:
                logger.warning("‚ö†Ô∏è Aucun GPU d√©tect√© - entra√Ænement sera lent")
        except ImportError:
            logger.warning("‚ö†Ô∏è PyTorch non install√©")
        
        # RAM
        try:
            import psutil
            ram_gb = psutil.virtual_memory().total / 1e9
            logger.info(f"üíæ RAM: {ram_gb:.1f}GB")
        except ImportError:
            logger.info("üíæ RAM: Information non disponible")
        
        # Espace disque
        disk_free = shutil.disk_usage('/content')[2] / 1e9
        logger.info(f"üíø Espace libre: {disk_free:.1f}GB")
        
        if disk_free < 10:
            logger.warning("‚ö†Ô∏è Espace disque faible (<10GB)")
    
    def _install_dependencies(self):
        """Installe toutes les d√©pendances n√©cessaires"""
        
        logger.info("üì¶ Installation des d√©pendances...")
        
        # Packages Python essentiels
        essential_packages = [
            'ultralytics>=8.0.0',
            'opencv-python>=4.5.0',
            'matplotlib>=3.3.0',
            'seaborn>=0.11.0',
            'plotly>=5.0.0',
            'pandas>=1.3.0',
            'scikit-learn>=1.0.0',
            'onnx>=1.12.0',
            'onnxruntime>=1.12.0',
            'psutil',
            'pillow>=8.0.0'
        ]
        
        for package in essential_packages:
            try:
                logger.info(f"  Installing {package}...")
                subprocess.run([sys.executable, '-m', 'pip', 'install', package], 
                             check=True, capture_output=True)
                logger.info(f"  ‚úÖ {package}")
            except subprocess.CalledProcessError as e:
                logger.warning(f"  ‚ö†Ô∏è Erreur installation {package}: {e}")
        
        # V√©rification imports critiques
        critical_imports = ['torch', 'ultralytics', 'cv2', 'numpy', 'yaml']
        
        for module in critical_imports:
            try:
                __import__(module)
                logger.info(f"  ‚úÖ {module} import√© avec succ√®s")
            except ImportError as e:
                logger.error(f"  ‚ùå {module} non disponible: {e}")
    
    def _setup_directories(self):
        """Cr√©e la structure de r√©pertoires"""
        
        logger.info("üìÅ Configuration des r√©pertoires...")
        
        directories = [
            self.project_dir,
            self.datasets_dir,
            self.runs_dir,
            self.project_dir / 'scripts',
            self.project_dir / 'configs',
            self.project_dir / 'weights',
            self.datasets_dir / 'widerface',
            self.datasets_dir / 'yolo_widerface'
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            logger.info(f"  ‚úÖ {directory}")
    
    def _clone_yolov12_repo(self):
        """Clone le repository YOLOv12-Face"""
        
        logger.info("üì• Clonage repository YOLOv12...")
        
        yolov12_dir = self.project_dir / 'yolov12-face'
        
        if yolov12_dir.exists():
            logger.info("  ‚ÑπÔ∏è Repository d√©j√† clon√©")
            return
        
        try:
            subprocess.run([
                'git', 'clone', self.urls['yolov12_repo'], str(yolov12_dir)
            ], check=True, capture_output=True)
            
            logger.info(f"  ‚úÖ YOLOv12-Face clon√©: {yolov12_dir}")
            
            # Copier les fichiers de configuration YOLOv12
            if (yolov12_dir / 'ultralytics').exists():
                logger.info("  üìã Configuration YOLOv12 d√©tect√©e")
                
        except subprocess.CalledProcessError as e:
            logger.error(f"  ‚ùå Erreur clonage: {e}")
    
    def _download_widerface_dataset(self):
        """T√©l√©charge et pr√©pare le dataset WiderFace"""
        
        logger.info("üì• T√©l√©chargement dataset WiderFace...")
        
        widerface_dir = self.datasets_dir / 'widerface'
        
        # T√©l√©charger fichiers
        files_to_download = [
            ('train', self.urls['widerface_train']),
            ('val', self.urls['widerface_val']),
            ('annotations', self.urls['widerface_annotations'])
        ]
        
        for name, url in files_to_download:
            output_file = widerface_dir / f"{name}.zip"
            
            if output_file.exists():
                logger.info(f"  ‚ÑπÔ∏è {name}.zip d√©j√† t√©l√©charg√©")
                continue
            
            try:
                logger.info(f"  üì• T√©l√©chargement {name}...")
                self._download_file(url, output_file)
                logger.info(f"  ‚úÖ {name}.zip t√©l√©charg√©")
                
                # Extraction
                logger.info(f"  üì¶ Extraction {name}...")
                with zipfile.ZipFile(output_file, 'r') as zip_ref:
                    zip_ref.extractall(widerface_dir)
                logger.info(f"  ‚úÖ {name} extrait")
                
            except Exception as e:
                logger.error(f"  ‚ùå Erreur {name}: {e}")
        
        logger.info("‚úÖ Dataset WiderFace pr√©par√©")
    
    def _download_file(self, url: str, output_path: Path):
        """T√©l√©charge un fichier avec barre de progression"""
        
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    
                    if total_size > 0:
                        progress = (downloaded / total_size) * 100
                        print(f"\r    Progression: {progress:.1f}%", end='', flush=True)
        
        print()  # Nouvelle ligne apr√®s progression
    
    def _setup_project_config(self):
        """Configure le projet avec les scripts cr√©√©s"""
        
        logger.info("‚öôÔ∏è Configuration du projet...")
        
        # Copier nos scripts dans le projet
        scripts_source = Path('/content/reconnaissance_Facial_v12')
        scripts_dest = self.project_dir / 'scripts'
        
        if scripts_source.exists():
            scripts_to_copy = [
                'config_v12.py',
                'main_v12.py',
                'data_preparation_v12.py',
                'model_evaluation_v12.py',
                'utils_v12.py'
            ]
            
            for script in scripts_to_copy:
                source_file = scripts_source / script
                dest_file = scripts_dest / script
                
                if source_file.exists():
                    shutil.copy2(source_file, dest_file)
                    logger.info(f"  ‚úÖ {script} copi√©")
        
        # Cr√©er configuration par d√©faut
        self._create_default_config()
        
        # Cr√©er script de lancement rapide
        self._create_quick_start_script()
    
    def _create_default_config(self):
        """Cr√©e une configuration par d√©faut optimis√©e Colab"""
        
        config_content = '''# YOLOv12-Face Configuration Colab Optimis√©e
model_size: 'n'  # nano pour Colab gratuit
epochs: 50
batch_size: 16
image_size: 640

# Chemins Colab
data_path: '/content/datasets/yolo_widerface/dataset.yaml'
project_path: '/content/runs/train'
name: 'yolov12_face_colab'

# Optimisations Colab
workers: 2
cache: false
amp: true
cos_lr: true
close_mosaic: 10

# Patience pour early stopping
patience: 15
save_period: 10

# Augmentations mod√©r√©es pour visages
augmentation:
  hsv_h: 0.015
  hsv_s: 0.7
  hsv_v: 0.4
  degrees: 0.0
  translate: 0.1
  scale: 0.5
  shear: 0.0
  perspective: 0.0
  flipud: 0.0
  fliplr: 0.5
  mosaic: 1.0
  mixup: 0.0

# Loss weights pour visages
loss:
  box: 7.5
  cls: 0.5
  dfl: 1.5
'''
        
        config_file = self.project_dir / 'configs' / 'colab_default.yaml'
        with open(config_file, 'w') as f:
            f.write(config_content)
        
        logger.info(f"  ‚úÖ Configuration par d√©faut: {config_file}")
    
    def _create_quick_start_script(self):
        """Cr√©e un script de d√©marrage rapide"""
        
        quick_start_content = '''#!/bin/bash
# YOLOv12-Face - Script de D√©marrage Rapide

echo "üöÄ YOLOv12-Face - D√©marrage Rapide"
echo "=================================="

cd /content/yolov12_face_project

# 1. Pr√©paration des donn√©es (si pas d√©j√† fait)
if [ ! -d "/content/datasets/yolo_widerface" ]; then
    echo "üìÅ Pr√©paration des donn√©es..."
    python scripts/data_preparation_v12.py --convert --output /content/datasets/
fi

# 2. Lancement entra√Ænement
echo "üöÄ D√©marrage entra√Ænement YOLOv12-Face..."
python scripts/main_v12.py --config configs/colab_default.yaml

# 3. √âvaluation automatique
echo "üìä √âvaluation du mod√®le..."
python scripts/model_evaluation_v12.py \\
    --model /content/runs/train/yolov12_face_colab/weights/best.pt \\
    --data /content/datasets/yolo_widerface/dataset.yaml \\
    --plots

echo "‚úÖ Entra√Ænement termin√©!"
echo "üìÅ R√©sultats dans: /content/runs/train/yolov12_face_colab/"
'''
        
        script_file = self.project_dir / 'quick_start.sh'
        with open(script_file, 'w') as f:
            f.write(quick_start_content)
        
        # Rendre ex√©cutable
        os.chmod(script_file, 0o755)
        
        logger.info(f"  ‚úÖ Script d√©marrage rapide: {script_file}")
    
    def _run_integration_test(self):
        """Lance un test d'int√©gration rapide"""
        
        logger.info("üß™ Test d'int√©gration...")
        
        try:
            # Test import ultralytics
            from ultralytics import YOLO
            logger.info("  ‚úÖ YOLO import√©")
            
            # Test cr√©ation mod√®le (sans poids)
            model = YOLO('yolov8n.pt')  # Mod√®le de base
            logger.info("  ‚úÖ Mod√®le YOLO cr√©√©")
            
            # Test PyTorch
            import torch
            if torch.cuda.is_available():
                logger.info(f"  ‚úÖ CUDA disponible: {torch.cuda.get_device_name()}")
            
            logger.info("‚úÖ Tous les tests passent!")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur test d'int√©gration: {e}")
    
    def _ask_user_confirmation(self, question: str) -> bool:
        """Demande confirmation utilisateur (toujours True en auto)"""
        if self.is_colab:
            # En mode auto pour Colab
            logger.info(f"ü§ñ Auto-confirmation: {question} -> OUI")
            return True
        else:
            # Mode interactif pour local
            response = input(f"{question} (o/N): ").lower()
            return response in ['o', 'oui', 'y', 'yes']
    
    def _print_next_steps(self):
        """Affiche les prochaines √©tapes"""
        
        logger.info("\n" + "="*60)
        logger.info("üéâ SETUP TERMIN√â AVEC SUCC√àS!")
        logger.info("="*60)
        
        logger.info("\nüìã PROCHAINES √âTAPES:")
        
        logger.info("\n1Ô∏è‚É£ **D√©marrage Rapide (Recommand√©)**")
        logger.info("   cd /content/yolov12_face_project")
        logger.info("   bash quick_start.sh")
        
        logger.info("\n2Ô∏è‚É£ **Entra√Ænement Manuel**")
        logger.info("   cd /content/yolov12_face_project")
        logger.info("   python scripts/main_v12.py --config configs/colab_default.yaml")
        
        logger.info("\n3Ô∏è‚É£ **Configuration Personnalis√©e**")
        logger.info("   python scripts/config_v12.py --preset colab_nano")
        logger.info("   python scripts/main_v12.py --config /content/yolov12_face_config.yaml")
        
        logger.info("\nüìä **Monitoring**")
        logger.info("   - Logs: /content/runs/train/yolov12_face_colab/")
        logger.info("   - Poids: /content/runs/train/yolov12_face_colab/weights/")
        logger.info("   - TensorBoard: tensorboard --logdir /content/runs/")
        
        logger.info("\nüéØ **Objectifs Performance**")
        logger.info("   - WiderFace Easy: >97.5% (vs 94.8% ADYOLOv5)")
        logger.info("   - WiderFace Medium: >96.5% (vs 93.8% ADYOLOv5)")
        logger.info("   - WiderFace Hard: >88.5% (vs 84.4% ADYOLOv5)")
        
        logger.info("\nüöÄ **Bonne chance pour d√©passer ADYOLOv5-Face!**")


def quick_setup():
    """Fonction de setup rapide pour import direct"""
    
    setup = YOLOv12FaceColabSetup()
    setup.setup_environment()


def main():
    """Fonction principale"""
    
    import argparse
    
    parser = argparse.ArgumentParser(description='YOLOv12-Face Colab Setup')
    parser.add_argument('--skip-download', action='store_true', 
                       help='Ignorer t√©l√©chargement WiderFace')
    parser.add_argument('--quick', action='store_true',
                       help='Setup rapide sans interactions')
    
    args = parser.parse_args()
    
    setup = YOLOv12FaceColabSetup()
    
    if args.quick:
        logger.info("üöÄ Mode setup rapide activ√©")
    
    setup.setup_environment()


if __name__ == "__main__":
    main()
